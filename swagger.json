{
    "swagger": "2.0",
    "info": {
        "description": "This is the REST API for our budgeting application.",
        "title": "monetr's REST API",
        "contact": {
            "name": "Support",
            "url": "http://github.com/monetrapp/rest-api"
        },
        "license": {
            "name": "Business Source License 1.1",
            "url": "https://github.com/monetrapp/rest-api/blob/main/LICENSE"
        },
        "version": "0.0"
    },
    "host": "api.monetr.app",
    "paths": {
        "/authentication/login": {
            "post": {
                "description": "Authenticate a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "operationId": "login",
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists all of the bank accounts for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "List All Bank Accounts",
                "operationId": "list-all-bank-accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BankAccount"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a bank account for the provided link. Note: Bank accounts can only be created this way for manual links. Attempting to create a bank account for a link that is associated with Plaid will result in an error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "Create Bank Account",
                "operationId": "create-bank-account",
                "parameters": [
                    {
                        "description": "New Bank Account",
                        "name": "newBankAccount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.BankAccountCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.BankAccount"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/balances": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the balances for the specified bank account (including calculated balances).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bank Accounts"
                ],
                "summary": "Get Bank Account Balances",
                "operationId": "get-bank-account-balances",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/repository.Balances"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/funding_schedules": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all of the funding schedule's for the current bank account.",
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "List Funding Schedules",
                "operationId": "list-funding-schedules",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.FundingSchedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "Create a funding schedule for the specified bank account.",
                "operationId": "create-funding-schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New Funding Schedule",
                        "name": "fundingSchedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FundingSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FundingSchedule"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/funding_schedules/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve information about how much spending objects will receive on the next funding schedule.",
                "tags": [
                    "Funding Schedules"
                ],
                "summary": "Get Funding Stats",
                "operationId": "get-funding-status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/repository.FundingStats"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/spending": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all of the spending for the specified bank account.",
                "tags": [
                    "Spending"
                ],
                "summary": "List Spending",
                "operationId": "list-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spending"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing spending object. Some changes may cause the spending object to be recalculated.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Update Spending",
                "operationId": "update-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated spending",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.UpdateSpendingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Spending"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create an spending for the specified bank account.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Create Spending",
                "operationId": "create-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New spending",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Spending"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Spending"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/spending/transfer": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Transfer allocated funds to or from a spending object.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Spending"
                ],
                "summary": "Transfer To or From Spending",
                "operationId": "transfer-spending",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Transfer",
                        "name": "Spending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.SpendingTransfer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Spending"
                            }
                        }
                    },
                    "400": {
                        "description": "Malformed JSON or invalid RRule.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Failed to persist data.",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/bank_accounts/{bankAccountId}/transactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists the transactions for the specified bank account Id. Transactions are returned sorted by the date they were authorized (descending) and then by their numeric Id (descending). This means that transactions that were first seen later will be higher in the list than they may have actually occurred.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "List Transactions",
                "operationId": "list-transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bank Account ID",
                        "name": "bankAccountId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Specifies the number of transactions to return in the result, default is 25. Max is 100.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The number of transactions to skip before returning any.",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.InvalidBankAccountIdError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/billing/create_checkout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a checkout session for the user to enter billing information in and for us to associate it with a new subscription object.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Billing"
                ],
                "summary": "Create Checkout Session",
                "operationId": "create-checkout-session",
                "parameters": [
                    {
                        "description": "New Checkout Session",
                        "name": "createCheckoutSession",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/swag.CreateCheckoutSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.CreateCheckoutSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "description": "Provides the configuration that should be used by the frontend application or UI.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Config"
                ],
                "summary": "Get Config",
                "operationId": "app-config",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Just a simple health check endpoint. This is not used at all in the frontend of the application and is meant to be used in containers to determine if the primary API listener is working.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Check API Health",
                "operationId": "api-health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.HealthResponse"
                        }
                    }
                }
            }
        },
        "/links": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists all of the links for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "List All Links",
                "operationId": "list-all-links",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Link"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a manual link.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Links"
                ],
                "summary": "Create A Link",
                "operationId": "create-link",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Link"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/link/setup/wait/{linkId:uint64}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Long poll endpoint that will timeout if data has not yet been pulled. Or will return 200 if data is ready.",
                "tags": [
                    "Plaid"
                ],
                "summary": "Wait For Plaid Account Data",
                "operationId": "wait-for-plaid-data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Link ID for the plaid link that is being setup. NOTE: Not Plaid's ID, this is a numeric ID we assign to the object that is returned from the callback endpoint.",
                        "name": "linkId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "408": {
                        "description": ""
                    }
                }
            }
        },
        "/plaid/token/callback": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives the public token after a user has authenticated their bank account to exchange with plaid.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "Plaid Token Callback",
                "operationId": "plaid-token-callback",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swag.PlaidTokenCallbackResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        },
        "/plaid/token/new": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a link token from Plaid to be used to authenticate a user's bank account with our application.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plaid"
                ],
                "summary": "New Plaid Token",
                "operationId": "new-plaid-token",
                "responses": {
                    "200": {
                        "description": ""
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controller.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.ApiError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controller.InvalidBankAccountIdError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid bank account Id provided"
                }
            }
        },
        "controller.SpendingTransfer": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "fromSpendingId": {
                    "type": "integer"
                },
                "toSpendingId": {
                    "type": "integer"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "models.BankAccount": {
            "type": "object",
            "properties": {
                "accountSubType": {
                    "type": "string",
                    "example": "checking"
                },
                "accountType": {
                    "type": "string",
                    "example": "depository"
                },
                "availableBalance": {
                    "type": "integer",
                    "example": 102356
                },
                "bankAccountId": {
                    "type": "integer",
                    "example": 1234
                },
                "currentBalance": {
                    "description": "Current Balance is a 64-bit representation of a bank account's total balance (excluding pending transactions) in\nthe form of an integer. To derive a decimal value divide this value by 100.",
                    "type": "integer",
                    "example": 102400
                },
                "linkId": {
                    "type": "integer",
                    "example": 2345
                },
                "mask": {
                    "type": "string",
                    "example": "0000"
                },
                "name": {
                    "type": "string",
                    "example": "Checking Account"
                },
                "officialName": {
                    "type": "string",
                    "example": "US Bank - Checking Account"
                },
                "originalName": {
                    "type": "string",
                    "example": "Checking Account #1"
                }
            }
        },
        "models.FundingSchedule": {
            "type": "object",
            "properties": {
                "bankAccountId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "fundingScheduleId": {
                    "type": "integer"
                },
                "lastOccurrence": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextOccurrence": {
                    "type": "string"
                },
                "rule": {
                    "type": "string",
                    "example": "FREQ=MONTHLY;BYMONTHDAY=15,-1"
                }
            }
        },
        "models.Link": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdByUserId": {
                    "type": "integer"
                },
                "customInstitutionName": {
                    "type": "string"
                },
                "institutionName": {
                    "type": "string"
                },
                "linkId": {
                    "type": "integer"
                },
                "linkStatus": {
                    "type": "integer"
                },
                "linkType": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updatedByUser": {
                    "$ref": "#/definitions/models.User"
                },
                "updatedByUserId": {
                    "type": "integer"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "isPhoneVerified": {
                    "type": "boolean"
                },
                "lastName": {
                    "type": "string"
                },
                "loginId": {
                    "type": "integer"
                }
            }
        },
        "models.Spending": {
            "type": "object",
            "properties": {
                "bankAccountId": {
                    "type": "integer"
                },
                "currentAmount": {
                    "type": "integer"
                },
                "dateCreated": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fundingScheduleId": {
                    "type": "integer"
                },
                "isBehind": {
                    "type": "boolean"
                },
                "isPaused": {
                    "type": "boolean"
                },
                "lastRecurrence": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nextContributionAmount": {
                    "type": "integer"
                },
                "nextRecurrence": {
                    "type": "string"
                },
                "recurrenceRule": {
                    "type": "string"
                },
                "spendingId": {
                    "type": "integer"
                },
                "spendingType": {
                    "type": "integer"
                },
                "targetAmount": {
                    "type": "integer"
                },
                "usedAmount": {
                    "type": "integer"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "authorizedDate": {
                    "type": "string"
                },
                "bankAccount": {
                    "$ref": "#/definitions/models.BankAccount"
                },
                "bankAccountId": {
                    "type": "integer"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "isPending": {
                    "type": "boolean"
                },
                "merchantName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "originalCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "originalMerchantName": {
                    "type": "string"
                },
                "originalName": {
                    "type": "string"
                },
                "spending": {
                    "$ref": "#/definitions/models.Spending"
                },
                "spendingAmount": {
                    "description": "SpendingAmount is the amount deducted from the expense this transaction was spent from. This is used when a\ntransaction is more than the expense currently has allocated. If the transaction were to be deleted or changed we\nwant to make sure we return the correct amount to the expense.",
                    "type": "integer"
                },
                "spendingId": {
                    "type": "integer"
                },
                "transactionId": {
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/models.Account"
                },
                "accountId": {
                    "type": "integer"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "login": {
                    "$ref": "#/definitions/models.Login"
                },
                "loginId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "repository.Balances": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "bankAccountId": {
                    "type": "integer"
                },
                "current": {
                    "type": "integer"
                },
                "expenses": {
                    "type": "integer"
                },
                "goals": {
                    "type": "integer"
                },
                "safe": {
                    "type": "integer"
                }
            }
        },
        "repository.FundingStats": {
            "type": "object",
            "properties": {
                "bankAccountId": {
                    "type": "integer"
                },
                "fundingScheduleId": {
                    "type": "integer"
                },
                "nextExpenseContribution": {
                    "type": "integer"
                },
                "nextGoalContribution": {
                    "type": "integer"
                },
                "numberOfExpenses": {
                    "type": "integer"
                },
                "numberOfGoals": {
                    "type": "integer"
                }
            }
        },
        "swag.BankAccountCreateRequest": {
            "type": "object",
            "properties": {
                "accountSubType": {
                    "description": "Sub Type can have numerous values, but given that the application currently only supports depository the most\ncommon values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,\ncd, money market, paypal, prepaid, cash management and ebt.\nMore information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema",
                    "type": "string",
                    "example": "checking"
                },
                "accountType": {
                    "description": "Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application\nwill only support depository. Other types may be supported in the future.",
                    "type": "string",
                    "example": "depository"
                },
                "availableBalance": {
                    "description": "The balance available in the account represented as whole cents. This is typically the current balance minus the\ntotal value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or\nmaintained manually for manual links.",
                    "type": "integer",
                    "example": 102356
                },
                "currentBalance": {
                    "description": "The current balance in the account as whole cents without taking into consideration any pending transactions.",
                    "type": "integer",
                    "example": 102400
                },
                "linkId": {
                    "description": "The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts\ncan be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be\ncreated through the Plaid interface. At the time of writing this there is not a way to add or remove a bank\naccount from an existing Plaid Link.",
                    "type": "integer",
                    "example": 2345
                },
                "mask": {
                    "description": "Last 4 digits of the bank account's account number. We do not store the full bank account number or any other\nsensitive account information.",
                    "type": "string",
                    "example": "9876"
                },
                "name": {
                    "description": "Name of the account, this is different than the `originalName`. This field can be changed later on while the\n`originalName` field cannot be changed once the account is created.",
                    "type": "string",
                    "example": "Checking Account"
                },
                "officialName": {
                    "description": "Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an\naccount.",
                    "type": "string",
                    "example": "US Bank - Checking Account"
                },
                "originalName": {
                    "description": "The original name of the bank account from when it was created. This name cannot be changed after the bank\naccount is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to\nreduce the amount of logic in the application the same rule applies for manual links as well.",
                    "type": "string",
                    "example": "Checking Account #1"
                }
            }
        },
        "swag.CreateCheckoutSessionRequest": {
            "type": "object",
            "properties": {
                "priceId": {
                    "description": "PriceId represents the Id of the price object for the subscription. Price objects are associated with a single\nproduct. So a price represents both how much is being paid, and what is being paid for.",
                    "type": "integer"
                }
            }
        },
        "swag.CreateCheckoutSessionResponse": {
            "type": "object",
            "properties": {
                "sessionId": {
                    "description": "The value returned from stripe once a checkout session has been created. This is used on the frontend for the\nuser to checkout and pay for their chosen plan.",
                    "type": "string"
                }
            }
        },
        "swag.HealthResponse": {
            "type": "object",
            "properties": {
                "apiHealthy": {
                    "description": "This will always be true. If the API is not healthy then an error is returned to the client or the request will\nsimply not be served.",
                    "type": "boolean"
                },
                "dbHealthy": {
                    "description": "Indicates whether or not the current API process handling the request can communicate with the PostgreSQL\ndatabase.",
                    "type": "boolean"
                },
                "release": {
                    "description": "Release is only present when a deployment was run for a specific tag. This is only found in acceptance and\nproduction.",
                    "type": "string"
                },
                "revision": {
                    "description": "The Git SHA code for the commit of the deployed REST API.",
                    "type": "string"
                }
            }
        },
        "swag.PlaidTokenCallbackResponse": {
            "type": "object",
            "properties": {
                "jobId": {
                    "description": "If webhooks are not enabled then a job Id is returned with the response. This job Id can also be used to check\nfor initial transactions being retrieved.",
                    "type": "string"
                },
                "linkId": {
                    "description": "LinkId will always be included in a successful response. It can be used when webhooks are enabled to wait for the\ninitial transactions to be retrieved.",
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "swag.UpdateSpendingRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Currently used as a description of the recurrence rule so that it does not need to be \"generated\" with each\npattern. This is not intended to be used by the end user and is generated by the UI when the spending object is\ncreated or updated. However it can be modified if you were to send this request manually. It has no side affects,\nit is simply used to better display data to the end user at this time.",
                    "type": "string",
                    "example": "1st of every month"
                },
                "fundingScheduleId": {
                    "description": "The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.",
                    "type": "integer",
                    "example": 8539
                },
                "name": {
                    "description": "Human friendly name of the spending object. Something like \"Amazon Prime\". But can be anything.",
                    "type": "string",
                    "example": "Amazon Prime"
                },
                "nextRecurrence": {
                    "description": "The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.\nFor goals this date is somewhat static. It can be modified but is not automatically recalculated once it is\nreached. Changing this date would recalculate contributions to this spending object. These dates should be\nprovided in RFC3339 format with the timezone of the client included. The timezone is important as its used to\ncalculate the next time this expense recurs.",
                    "type": "string",
                    "example": "2021-05-01T00:00:00-05:00"
                },
                "recurrenceRule": {
                    "description": "Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting\nsystem recalculate the next recurrence date each time an expense's recurrence date is reached. More information\nabout the format of the rule can be found here: https://tools.ietf.org/html/rfc5545\nNote: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the\nrule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go\nChanging this rule would recalculate contributions to this spending object.",
                    "type": "string",
                    "example": "FREQ=MONTHLY;BYMONTHDAY=1"
                },
                "spendingId": {
                    "description": "The spending Id of the goal or expense that you are updating.",
                    "type": "integer",
                    "example": 4364
                },
                "targetAmount": {
                    "description": "How much the spending object should allocate by the next recurrence date. For goals this target is reached once\nand is considered complete, even if part of the total amount has been spent. For expenses this amount is\nattempted to be allocated before the recurrence date regardless of spending. This means that even if a\ntransaction is spent from this spending object the allocation system will still allocate more funds to this\nexpense if the transaction was spent before it is technically due AND the funding schedule occurs before the\nspecified next recurrence date. Changing this amount will recalculate contributions to this spending object.",
                    "type": "integer",
                    "example": 1395
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "M-Token",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Funding Schedules are created by the user to tell us when money should be taken from their account to fund their goals and expenses.",
            "name": "Funding Schedules"
        }
    ]
}