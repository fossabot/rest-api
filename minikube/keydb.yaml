---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keydb-config
  labels:
    app.kubernetes.io/name: keydb
    app.kubernetes.io/instance: keydb
data:
  config.sh: |-
    #!/bin/bash
    hostAddress="$HOSTNAME.keydb.$KEYDB_NAMESPACE.svc.cluster.local"
    echo "Setting up $KEYDB_REPLICAS replicas"
    declare -i replicas="$KEYDB_REPLICAS";
    for (( i=0; i<$replicas; i++ ))
    do
      nodeAddress="keydb-$i.keydb.$KEYDB_NAMESPACE.svc.cluster.local"
      if [[ "$hostAddress" = "$nodeAddress" ]]
      then
        # If the current node address matches the host address then skip this one.
        continue
      fi

      echo "Adding $nodeAddress to config"
      echo "replicaof $nodeAddress 6379" >> /etc/keydb/replication.conf
    done
  keydb.conf: |-
    # assuming below parameters were set and IP address of this instance is keydb-0
    port 6379
    protected-mode no

    # you will need to configure the following
    multi-master yes
    active-replica yes

    include /etc/keydb/replication.conf

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keydb
  labels:
    app: keydb
    name: keydb
    app.kubernetes.io/name: keydb
    app.kubernetes.io/instance: keydb
    app.kubernetes.io/component: server
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  serviceName: keydb
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: keydb
      app.kubernetes.io/instance: keydb
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keydb
        app.kubernetes.io/instance: keydb
        app.kubernetes.io/component: server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      terminationGracePeriodSeconds: 10
      volumes:
        - name: data
          emptyDir: { }
        - name: shared
          emptyDir: { }
        - name: config
          configMap:
            name: keydb-config
      initContainers:
        - name: configure
          image: eqalpha/keydb:latest
          command:
            - "/bin/sh"
            - "-ec"
          args:
            - |
              echo "Setting up container";
              cp /tmp/keydb/config.sh /etc/keydb/config.sh;
              chmod +x /etc/keydb/config.sh;
              /etc/keydb/config.sh;
          env:
            - name: KEYDB_REPLICAS
              value: "3"
            - name: KEYDB_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: shared
              mountPath: /etc/keydb
            - name: config
              mountPath: /tmp/keydb
      containers:
        - name: keydb
          image: eqalpha/keydb:latest
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
          env:
            - name: KEYDB_REPLICAS
              value: "3"
            - name: KEYDB_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: redis
              containerPort: 6379
          volumeMounts:
            - name: data
              mountPath: /data
            - name: shared
              mountPath: /etc/keydb
            - name: config
              mountPath: /etc/keydb/keydb.conf
              subPath: keydb.conf
          livenessProbe:
            tcpSocket:
              port: redis
            failureThreshold: 1
            successThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - "keydb-cli"
                - "PING"
            failureThreshold: 1
            successThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 1

---
apiVersion: v1
kind: Service
metadata:
  name: keydb
  labels:
    app: keydb
    name: keydb
    app.kubernetes.io/name: keydb
    app.kubernetes.io/instance: keydb
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: redis
      protocol: TCP
      name: redis
  selector:
    app.kubernetes.io/name: keydb
    app.kubernetes.io/instance: keydb
