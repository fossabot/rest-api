definitions:
  controller.ApiError:
    properties:
      error:
        type: string
    type: object
  controller.InvalidBankAccountIdError:
    properties:
      error:
        example: invalid bank account Id provided
        type: string
    type: object
  controller.SpendingTransfer:
    properties:
      amount:
        type: integer
      fromSpendingId:
        type: integer
      toSpendingId:
        type: integer
    type: object
  models.Account:
    properties:
      accountId:
        type: integer
      timezone:
        type: string
    type: object
  models.BankAccount:
    properties:
      accountSubType:
        example: checking
        type: string
      accountType:
        example: depository
        type: string
      availableBalance:
        example: 102356
        type: integer
      bankAccountId:
        example: 1234
        type: integer
      currentBalance:
        description: |-
          Current Balance is a 64-bit representation of a bank account's total balance (excluding pending transactions) in
          the form of an integer. To derive a decimal value divide this value by 100.
        example: 102400
        type: integer
      linkId:
        example: 2345
        type: integer
      mask:
        example: "0000"
        type: string
      name:
        example: Checking Account
        type: string
      officialName:
        example: US Bank - Checking Account
        type: string
      originalName:
        example: 'Checking Account #1'
        type: string
    type: object
  models.FundingSchedule:
    properties:
      bankAccountId:
        type: integer
      description:
        type: string
      fundingScheduleId:
        type: integer
      lastOccurrence:
        type: string
      name:
        type: string
      nextOccurrence:
        type: string
      rule:
        example: FREQ=MONTHLY;BYMONTHDAY=15,-1
        type: string
    type: object
  models.Link:
    properties:
      createdAt:
        type: string
      createdByUserId:
        type: integer
      customInstitutionName:
        type: string
      institutionName:
        type: string
      linkId:
        type: integer
      linkStatus:
        type: integer
      linkType:
        type: integer
      updatedAt:
        type: string
      updatedByUser:
        $ref: '#/definitions/models.User'
      updatedByUserId:
        type: integer
    type: object
  models.Login:
    properties:
      email:
        type: string
      firstName:
        type: string
      isEmailVerified:
        type: boolean
      isPhoneVerified:
        type: boolean
      lastName:
        type: string
      loginId:
        type: integer
    type: object
  models.Spending:
    properties:
      bankAccountId:
        type: integer
      currentAmount:
        type: integer
      dateCreated:
        type: string
      description:
        type: string
      fundingScheduleId:
        type: integer
      isBehind:
        type: boolean
      isPaused:
        type: boolean
      lastRecurrence:
        type: string
      name:
        type: string
      nextContributionAmount:
        type: integer
      nextRecurrence:
        type: string
      recurrenceRule:
        type: string
      spendingId:
        type: integer
      spendingType:
        type: integer
      targetAmount:
        type: integer
      usedAmount:
        type: integer
    type: object
  models.Transaction:
    properties:
      amount:
        type: integer
      authorizedDate:
        type: string
      bankAccount:
        $ref: '#/definitions/models.BankAccount'
      bankAccountId:
        type: integer
      categories:
        items:
          type: string
        type: array
      createdAt:
        type: string
      date:
        type: string
      isPending:
        type: boolean
      merchantName:
        type: string
      name:
        type: string
      originalCategories:
        items:
          type: string
        type: array
      originalMerchantName:
        type: string
      originalName:
        type: string
      spending:
        $ref: '#/definitions/models.Spending'
      spendingAmount:
        description: |-
          SpendingAmount is the amount deducted from the expense this transaction was spent from. This is used when a
          transaction is more than the expense currently has allocated. If the transaction were to be deleted or changed we
          want to make sure we return the correct amount to the expense.
        type: integer
      spendingId:
        type: integer
      transactionId:
        type: integer
    type: object
  models.User:
    properties:
      account:
        $ref: '#/definitions/models.Account'
      accountId:
        type: integer
      firstName:
        type: string
      lastName:
        type: string
      login:
        $ref: '#/definitions/models.Login'
      loginId:
        type: integer
      userId:
        type: integer
    type: object
  repository.Balances:
    properties:
      available:
        type: integer
      bankAccountId:
        type: integer
      current:
        type: integer
      expenses:
        type: integer
      goals:
        type: integer
      safe:
        type: integer
    type: object
  repository.FundingStats:
    properties:
      bankAccountId:
        type: integer
      fundingScheduleId:
        type: integer
      nextExpenseContribution:
        type: integer
      nextGoalContribution:
        type: integer
      numberOfExpenses:
        type: integer
      numberOfGoals:
        type: integer
    type: object
  swag.BankAccountCreateRequest:
    properties:
      accountSubType:
        description: |-
          Sub Type can have numerous values, but given that the application currently only supports depository the most
          common values you will see or use are; checking and savings. Other supported types (albeit untested) are; hsa,
          cd, money market, paypal, prepaid, cash management and ebt.
          More information on these can be found here: https://plaid.com/docs/api/accounts/#account-type-schema
        example: checking
        type: string
      accountType:
        description: |-
          Account Type can be; depository, credit, loan, investment or other. At the time of writing this the application
          will only support depository. Other types may be supported in the future.
        example: depository
        type: string
      availableBalance:
        description: |-
          The balance available in the account represented as whole cents. This is typically the current balance minus the
          total value of all pending transactions. This value is not calculated in the API and is retrieved from Plaid or
          maintained manually for manual links.
        example: 102356
        type: integer
      currentBalance:
        description: The current balance in the account as whole cents without taking into consideration any pending transactions.
        example: 102400
        type: integer
      linkId:
        description: |-
          The numeric Id of the Link this bank account is associated with, if the link is manual then bank bank accounts
          can be created manually via the API. If the Link is associated with Plaid though then bank accounts can only be
          created through the Plaid interface. At the time of writing this there is not a way to add or remove a bank
          account from an existing Plaid Link.
        example: 2345
        type: integer
      mask:
        description: |-
          Last 4 digits of the bank account's account number. We do not store the full bank account number or any other
          sensitive account information.
        example: "9876"
        type: string
      name:
        description: |-
          Name of the account, this is different than the `originalName`. This field can be changed later on while the
          `originalName` field cannot be changed once the account is created.
        example: Checking Account
        type: string
      officialName:
        description: |-
          Official name is only used with bank accounts coming from Plaid. It is another name that Plaid uses for an
          account.
        example: US Bank - Checking Account
        type: string
      originalName:
        description: |-
          The original name of the bank account from when it was created. This name cannot be changed after the bank
          account is created. This is primarily due to bank account's coming from a 3rd party provider like Plaid. But to
          reduce the amount of logic in the application the same rule applies for manual links as well.
        example: 'Checking Account #1'
        type: string
    type: object
  swag.CreateCheckoutSessionRequest:
    properties:
      priceId:
        description: |-
          PriceId represents the Id of the price object for the subscription. Price objects are associated with a single
          product. So a price represents both how much is being paid, and what is being paid for.
        type: integer
    type: object
  swag.CreateCheckoutSessionResponse:
    properties:
      sessionId:
        description: |-
          The value returned from stripe once a checkout session has been created. This is used on the frontend for the
          user to checkout and pay for their chosen plan.
        type: string
    type: object
  swag.HealthResponse:
    properties:
      apiHealthy:
        description: |-
          This will always be true. If the API is not healthy then an error is returned to the client or the request will
          simply not be served.
        type: boolean
      dbHealthy:
        description: |-
          Indicates whether or not the current API process handling the request can communicate with the PostgreSQL
          database.
        type: boolean
      release:
        description: |-
          Release is only present when a deployment was run for a specific tag. This is only found in acceptance and
          production.
        type: string
      revision:
        description: The Git SHA code for the commit of the deployed REST API.
        type: string
    type: object
  swag.PlaidTokenCallbackResponse:
    properties:
      jobId:
        description: |-
          If webhooks are not enabled then a job Id is returned with the response. This job Id can also be used to check
          for initial transactions being retrieved.
        type: string
      linkId:
        description: |-
          LinkId will always be included in a successful response. It can be used when webhooks are enabled to wait for the
          initial transactions to be retrieved.
        type: integer
      success:
        type: boolean
    type: object
  swag.UpdateSpendingRequest:
    properties:
      description:
        description: |-
          Currently used as a description of the recurrence rule so that it does not need to be "generated" with each
          pattern. This is not intended to be used by the end user and is generated by the UI when the spending object is
          created or updated. However it can be modified if you were to send this request manually. It has no side affects,
          it is simply used to better display data to the end user at this time.
        example: 1st of every month
        type: string
      fundingScheduleId:
        description: The desired funding schedule of the spending. Changing this will trigger a recalculation of the spending object.
        example: 8539
        type: integer
      name:
        description: Human friendly name of the spending object. Something like "Amazon Prime". But can be anything.
        example: Amazon Prime
        type: string
      nextRecurrence:
        description: |-
          The next time this expense or goal is due. For expenses this date is recalculated each time this date passes.
          For goals this date is somewhat static. It can be modified but is not automatically recalculated once it is
          reached. Changing this date would recalculate contributions to this spending object. These dates should be
          provided in RFC3339 format with the timezone of the client included. The timezone is important as its used to
          calculate the next time this expense recurs.
        example: "2021-05-01T00:00:00-05:00"
        type: string
      recurrenceRule:
        description: |-
          Recurrence rule telling the budgeting system how often this expense should be used. This helps the budgeting
          system recalculate the next recurrence date each time an expense's recurrence date is reached. More information
          about the format of the rule can be found here: https://tools.ietf.org/html/rfc5545
          Note: These rules should be provided with the `RRULE:` prefix omitted if the tool you are using to generate the
          rule strings include it. These rules are parsed using this library: https://github.com/teambition/rrule-go
          Changing this rule would recalculate contributions to this spending object.
        example: FREQ=MONTHLY;BYMONTHDAY=1
        type: string
      spendingId:
        description: The spending Id of the goal or expense that you are updating.
        example: 4364
        type: integer
      targetAmount:
        description: |-
          How much the spending object should allocate by the next recurrence date. For goals this target is reached once
          and is considered complete, even if part of the total amount has been spent. For expenses this amount is
          attempted to be allocated before the recurrence date regardless of spending. This means that even if a
          transaction is spent from this spending object the allocation system will still allocate more funds to this
          expense if the transaction was spent before it is technically due AND the funding schedule occurs before the
          specified next recurrence date. Changing this amount will recalculate contributions to this spending object.
        example: 1395
        type: integer
    type: object
host: api.monetr.app
info:
  contact:
    name: Support
    url: http://github.com/monetrapp/rest-api
  description: This is the REST API for our budgeting application.
  license:
    name: Business Source License 1.1
    url: https://github.com/monetrapp/rest-api/blob/main/LICENSE
  title: monetr's REST API
  version: "0.0"
paths:
  /authentication/login:
    post:
      description: Authenticate a user.
      operationId: login
      produces:
      - application/json
      responses:
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      summary: Login
      tags:
      - Authentication
  /bank_accounts:
    get:
      description: Lists all of the bank accounts for the currently authenticated user.
      operationId: list-all-bank-accounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BankAccount'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List All Bank Accounts
      tags:
      - Bank Accounts
    post:
      consumes:
      - application/json
      description: 'Create a bank account for the provided link. Note: Bank accounts can only be created this way for manual links. Attempting to create a bank account for a link that is associated with Plaid will result in an error.'
      operationId: create-bank-account
      parameters:
      - description: New Bank Account
        in: body
        name: newBankAccount
        required: true
        schema:
          $ref: '#/definitions/swag.BankAccountCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BankAccount'
      security:
      - ApiKeyAuth: []
      summary: Create Bank Account
      tags:
      - Bank Accounts
  /bank_accounts/{bankAccountId}/balances:
    get:
      description: Get the balances for the specified bank account (including calculated balances).
      operationId: get-bank-account-balances
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.Balances'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Bank Account Balances
      tags:
      - Bank Accounts
  /bank_accounts/{bankAccountId}/funding_schedules:
    get:
      description: List all of the funding schedule's for the current bank account.
      operationId: list-funding-schedules
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FundingSchedule'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Funding Schedules
      tags:
      - Funding Schedules
    post:
      consumes:
      - application/json
      operationId: create-funding-schedule
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: New Funding Schedule
        in: body
        name: fundingSchedule
        required: true
        schema:
          $ref: '#/definitions/models.FundingSchedule'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FundingSchedule'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create a funding schedule for the specified bank account.
      tags:
      - Funding Schedules
  /bank_accounts/{bankAccountId}/funding_schedules/stats:
    get:
      description: Retrieve information about how much spending objects will receive on the next funding schedule.
      operationId: get-funding-status
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/repository.FundingStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Get Funding Stats
      tags:
      - Funding Schedules
  /bank_accounts/{bankAccountId}/spending:
    get:
      description: List all of the spending for the specified bank account.
      operationId: list-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spending'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Spending
      tags:
      - Spending
    post:
      consumes:
      - application/json
      description: Create an spending for the specified bank account.
      operationId: create-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: New spending
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/models.Spending'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Spending'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Spending
      tags:
      - Spending
    put:
      consumes:
      - application/json
      description: Update an existing spending object. Some changes may cause the spending object to be recalculated.
      operationId: update-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Updated spending
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/swag.UpdateSpendingRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Spending'
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Update Spending
      tags:
      - Spending
  /bank_accounts/{bankAccountId}/spending/transfer:
    post:
      consumes:
      - application/json
      description: Transfer allocated funds to or from a spending object.
      operationId: transfer-spending
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Transfer
        in: body
        name: Spending
        required: true
        schema:
          $ref: '#/definitions/controller.SpendingTransfer'
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Spending'
            type: array
        "400":
          description: Malformed JSON or invalid RRule.
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Failed to persist data.
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Transfer To or From Spending
      tags:
      - Spending
  /bank_accounts/{bankAccountId}/transactions:
    get:
      description: Lists the transactions for the specified bank account Id. Transactions are returned sorted by the date they were authorized (descending) and then by their numeric Id (descending). This means that transactions that were first seen later will be higher in the list than they may have actually occurred.
      operationId: list-transactions
      parameters:
      - description: Bank Account ID
        in: path
        name: bankAccountId
        required: true
        type: integer
      - description: Specifies the number of transactions to return in the result, default is 25. Max is 100.
        in: query
        name: limit
        type: integer
      - description: The number of transactions to skip before returning any.
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.InvalidBankAccountIdError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List Transactions
      tags:
      - Transactions
  /billing/create_checkout:
    post:
      consumes:
      - application/json
      description: Create a checkout session for the user to enter billing information in and for us to associate it with a new subscription object.
      operationId: create-checkout-session
      parameters:
      - description: New Checkout Session
        in: body
        name: createCheckoutSession
        required: true
        schema:
          $ref: '#/definitions/swag.CreateCheckoutSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.CreateCheckoutSessionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ApiError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create Checkout Session
      tags:
      - Billing
  /config:
    get:
      description: Provides the configuration that should be used by the frontend application or UI.
      operationId: app-config
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Get Config
      tags:
      - Config
  /health:
    get:
      description: Just a simple health check endpoint. This is not used at all in the frontend of the application and is meant to be used in containers to determine if the primary API listener is working.
      operationId: api-health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.HealthResponse'
      summary: Check API Health
      tags:
      - Health
  /links:
    get:
      description: Lists all of the links for the currently authenticated user.
      operationId: list-all-links
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Link'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: List All Links
      tags:
      - Links
    post:
      description: Create a manual link.
      operationId: create-link
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Link'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Create A Link
      tags:
      - Links
  /plaid/link/setup/wait/{linkId:uint64}:
    get:
      description: Long poll endpoint that will timeout if data has not yet been pulled. Or will return 200 if data is ready.
      operationId: wait-for-plaid-data
      parameters:
      - description: 'Link ID for the plaid link that is being setup. NOTE: Not Plaid''s ID, this is a numeric ID we assign to the object that is returned from the callback endpoint.'
        in: path
        name: linkId
        required: true
        type: string
      responses:
        "200":
          description: ""
        "408":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Wait For Plaid Account Data
      tags:
      - Plaid
  /plaid/token/callback:
    post:
      description: Receives the public token after a user has authenticated their bank account to exchange with plaid.
      operationId: plaid-token-callback
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/swag.PlaidTokenCallbackResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Plaid Token Callback
      tags:
      - Plaid
  /plaid/token/new:
    get:
      description: Generates a link token from Plaid to be used to authenticate a user's bank account with our application.
      operationId: new-plaid-token
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.ApiError'
      security:
      - ApiKeyAuth: []
      summary: New Plaid Token
      tags:
      - Plaid
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: M-Token
    type: apiKey
swagger: "2.0"
tags:
- description: Funding Schedules are created by the user to tell us when money should be taken from their account to fund their goals and expenses.
  name: Funding Schedules
